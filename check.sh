#!/usr/bin/env bash
# check_repo.sh ‚Äî –ë—ã—Å—Ç—Ä—ã–π –∞—É–¥–∏—Ç git-–ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –∏ LFS
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./check_repo.sh [–ø–æ—Ä–æ–≥_–ú–ë]
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ä–æ–≥ = 100 –ú–ë

set -euo pipefail

THRESHOLD_MB="${1:-100}"
THRESHOLD_BYTES=$(( THRESHOLD_MB * 1024 * 1024 ))

sep() { printf "\n%s\n" "----------------------------------------"; }
human() { # bytes -> —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    awk 'function human(x){ s="BKMGTPE"; while (x>=1024 && length(s)>1){x/=1024; s=substr(s,2)} return sprintf("%.2f %s", x, substr(s,1,1)) } {print human($1)}'
}

echo "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ—Ä–æ–≥: ${THRESHOLD_MB} MB)"

# 1) –í–Ω—É—Ç—Ä–∏ –ª–∏ –º—ã git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "‚ùå –ó–¥–µ—Å—å –Ω–µ—Ç git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."
    exit 1
fi

# 2) –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å
sep
echo "üìå Git —Å—Ç–∞—Ç—É—Å:"
git status -sb || true

# 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Git LFS
sep
LFS_OK=false
if command -v git-lfs >/dev/null 2>&1; then
    echo "‚úÖ Git LFS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(git lfs version)"
    LFS_OK=true
else
    echo "‚ö†Ô∏è Git LFS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –±–æ–ª—å—à–∏–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏: https://git-lfs.github.com"
fi

# 4) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ LFS –ø–æ .gitattributes
HAS_LFS_ATTR=false
if [ -f .gitattributes ]; then
    if grep -E 'filter=lfs|^(\*|\.)?\.exe' .gitattributes >/dev/null 2>&1; then
    echo "‚ÑπÔ∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –≤ .gitattributes, –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LFS."
    HAS_LFS_ATTR=true
    else
    echo "‚ÑπÔ∏è  .gitattributes –µ—Å—Ç—å, –Ω–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ LFS –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤."
    fi
    else
    echo "‚ÑπÔ∏è  –§–∞–π–ª .gitattributes –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
fi

# 5) –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –≤ —Ä–∞–±–æ—á–µ–º –¥–µ—Ä–µ–≤–µ (–≤–∫–ª—é—á–∞—è –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ)
sep
echo "üß± –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–±–æ—á–µ–º –¥–µ—Ä–µ–≤–µ (> ${THRESHOLD_MB} MB):"
FOUND_BIG=false
# –£—á—Ç—ë–º Windows Git Bash: stat -c%s –¥–ª—è GNU, stat -f%z –¥–ª—è BSD/–º–∞–∫. –ü—Ä–æ–±—É–µ–º –æ–±–∞.
while IFS= read -r -d '' f; do
    size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f" 2>/dev/null || echo 0)
    if [ "$size" -ge "$THRESHOLD_BYTES" ]; then
    FOUND_BIG=true
    echo "$(printf "%s\t" "$size" | human)  $f"
    fi
done < <(find . -type f ! -path "./.git/*" -print0)

if [ "$FOUND_BIG" = false ]; then
    echo "‚úÖ –ë–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–±–æ—á–µ–º –¥–µ—Ä–µ–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
fi

# 6) –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã —Å—Ä–µ–¥–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö git (–∏–Ω–¥–µ–∫—Å/HEAD)
sep
echo "üì¶ –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–• —Ñ–∞–π–ª–æ–≤ (> ${THRESHOLD_MB} MB):"
FOUND_BIG_TRACKED=false
while IFS= read -r -d '' f; do
    size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f" 2>/dev/null || echo 0)
    if [ "$size" -ge "$THRESHOLD_BYTES" ]; then
    FOUND_BIG_TRACKED=true
    echo "$(printf "%s\t" "$size" | human)  $f"
    fi
done < <(git ls-files -z)

if [ "$FOUND_BIG_TRACKED" = false ]; then
    echo "‚úÖ –ë–æ–ª—å—à–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
fi

# 7) –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ .exe (—á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
sep
echo "üß® –ö—Ä—É–ø–Ω—ã–µ .exe-—Ñ–∞–π–ª—ã (> 1 MB):"
FOUND_EXE=false
while IFS= read -r -d '' f; do
    size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f" 2>/dev/null || echo 0)
  if [ "$size" -ge $((1 * 1024 * 1024)) ]; then
    FOUND_EXE=true
    echo "$(printf "%s\t" "$size" | human)  $f"
    fi
done < <(find . -type f -iname "*.exe" ! -path "./.git/*" -print0)

if [ "$FOUND_EXE" = false ]; then
    echo "‚úÖ –ö—Ä—É–ø–Ω—ã—Ö .exe –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
fi

# 8) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
sep
PROBLEM=false
    if [ "$FOUND_BIG_TRACKED" = true ]; then
    PROBLEM=true
    echo "‚ùó –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–æ–ª—å—à–∏–µ –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–ï —Ñ–∞–π–ª—ã. GitHub –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª—ã > 100 MB."
    echo "   –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:"
    echo "   - –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ .gitignore:"
    echo "       git rm --cached <path> && echo '<path>' >> .gitignore && git commit -m 'remove large file'"
    echo "   - –ò–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ LFS (–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é):"
    echo "       git lfs install"
    echo "       git lfs track '<pattern>'"
    echo "       git add .gitattributes && git commit -m 'Track via LFS'"
    echo "       git lfs migrate import --include='<pattern>'"
    echo "       git push --force-with-lease origin main"
fi

if [ "$FOUND_EXE" = true ] && [ "$LFS_OK" = false ]; then
PROBLEM=true
echo "‚ùó –ù–∞–π–¥–µ–Ω—ã .exe, –∞ Git LFS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ï—Å–ª–∏ —ç—Ç–∏ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å ‚Äî –ø–æ—Å—Ç–∞–≤—å Git LFS."
fi

if [ "$PROBLEM" = false ]; then
echo "üéâ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ú–æ–∂–Ω–æ –ø—É—à–∏—Ç—å."
fi

sep
echo "üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–º–º–∏—Ç–∞:"
git log --oneline -n 3 || true

echo "‚úÖ –ì–æ—Ç–æ–≤–æ."
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "‚úÖ –ó–¥–µ—Å—å –µ—Å—Ç—å git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    git status -sb || true
else
    echo "‚ùå –ó–¥–µ—Å—å –Ω–µ—Ç git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
fi